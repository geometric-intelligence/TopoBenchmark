[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "TopoBenchmark"
dynamic = ["version"]
authors = [{ name = "PyT-Team Authors", email = "tlscabinet@gmail.com" }]
readme = "README.md"
description = "Topological Deep Learning"
license = { file = "LICENSE.txt" }
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
requires-python = ">= 3.10"
dependencies = [
    "tqdm",
    "numpy",
    "scipy",
    "torch",
    "torch-sparse",
    "torch-scatter",
    "requests",
    "scikit-learn",
    "networkx",
    "pandas",
    "hydra-core==1.3.2",
    "hydra-colorlog==1.2.0",
    "hydra-optuna-sweeper==1.2.0",
    "wandb",
    "rich",
    "rootutils",
    "toponetx @ git+https://github.com/pyt-team/TopoNetX.git",
    "topomodelx @ git+https://github.com/pyt-team/TopoModelX.git",
    "lightning==2.4.0",
]

[project.optional-dependencies]
doc = [
    "jupyter",
    "nbsphinx",
    "nbsphinx_link",
    "numpydoc",
    "sphinx",
    "sphinx_gallery",
    "pydata-sphinx-theme",
]
tutorial = ["matplotlib", "ipykernel", "notebook", "jupyterlab"]
lint = ["pre-commit", "ruff"]
test = ["pytest", "pytest-cov", "coverage", "jupyter", "mypy", "pytest-mock"]
dev = ["TopoBenchmark[test, lint, tutorial]"]
all = ["TopoBenchmark[dev, doc]"]

[project.urls]
homepage = "https://github.com/pyt-team/TopoBenchmarkX"
repository = "https://github.com/pyt-team/TopoBenchmarkX"

[tool.black]
line-length = 79           # PEP 8 standard for maximum line length
target-version = ['py310']

[tool.docformatter]
wrap-summaries = 79
wrap-descriptions = 79

[tool.ruff]
target-version = "py310"
#extend-include = ["*.ipynb"]
extend-exclude = ["test", "tutorials", "notebooks"]
line-length = 79                                    # PEP 8 standard for maximum line length

[tool.ruff.format]
docstring-code-format = false

[tool.ruff.lint]
select = [
    "F",    # pyflakes errors
    "E",    # code style
    "W",    # warnings
    "I",    # import order
    "UP",   # pyupgrade rules
    "B",    # bugbear rules
    "PIE",  # pie rules
    "Q",    # quote rules
    "RET",  # return rules
    "SIM",  # code simplifications
    "NPY",  # numpy rules
    "PERF", # performance rules
    "RUF",  # miscellaneous rules
]
fixable = ["ALL"]
ignore = [
    "E501",    # line too long
    "RET504",  # Unnecessary assignment before return
    "RET505",  # Unnecessary `elif` after `return` statement
    "NPY002",  # Replace legacy `np.random.seed` call with `np.random.Generator`
    "UP038",   # Use `X | Y` in `isinstance` call instead of `(X, Y)` -- not compatible with python 3.9 (even with __future__ import)
    "W293",    # Does not allow to have empty lines in multiline comments
    "PERF203", # [TODO: fix all such issues] `try`-`except` within a loop incurs performance overhead
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F403"]

[tool.setuptools.dynamic]
version = { attr = "topobenchmarkx.__version__" }

[tool.setuptools.packages.find]
include = ["topobenchmarkx", "topobenchmarkx.*"]

[tool.mypy]
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
disable_error_code = ["import-untyped"]
plugins = "numpy.typing.mypy_plugin"

[[tool.mypy.overrides]]
module = [
    "torch_cluster.*",
    "networkx.*",
    "scipy.spatial",
    "scipy.sparse",
    "toponetx.classes.simplicial_complex",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = "--capture=no"
pythonpath = ["."]

[tool.numpydoc_validation]
checks = ["all", "GL01", "ES01", "EX01", "SA01"]
exclude = ['\.undocumented_method$', '\.__init__$', '\.__repr__$']
